"use client"
// app/Components/DoorPuzzle.tsx
import React, { useEffect, useMemo, useRef, useState } from "react";
import { useParams } from "next/navigation";

type Stage = "safe" | "key" | "door";
type RunStatus = "idle" | "running" | "success" | "error" | "timeout";

type Props = {
    stage?: Stage;
    doorsCount?: number;
    timeLimitMs?: number;
    onComplete?: () => void;
};

// TODO
// we want a minimum timer on this one as it can't expire any sooner than it takes to run all the combinations
// set a minimum length etc
// add a answer page for testing
// debug some existing code - user is being told door 4 is the exit door when they run the code they're give, but there is a bug in the code
// the correct answer is actually a different door should be a different door.

// Most basic example without extended conditions above
/*
//TBC
function pickDoor(doors, reportedDoor) {


}
*/



// --------- Game Player Instruction and Template ---------
const DEFAULT_TEMPLATE = `// ==== Key Game: Fix the bug to find the real exit door ===
// There are 5 doors numbered 1..5. A control system "reports" which door is the exit,
// but there's a problem in the code. It's your job to fix the code and find the real exit door.
// problem, the escape room door keypad is hexadecimal your key is in binary. 
// --Notes:
// - you get a doors array - the door numbers (e.g., [1,2,3,4,5 ])
// - mapExit: the broken exit door  
// - realExit: the real exit door is available to your code like other puzzles
// Implement pickDoor(doors, reportedDoor) and return the correct door number.
//
// --- Hints ---
// • Each door has hidden dimensions generated by the system.
// • The bug is in how the average is calculated and compared.
// • The real exit door satisfies area ≈ 3 * (average area of all other doors).
// • You can use console.log() to print debug information.
//

function pickDoor(doors, reportedDoor) {
  // Fake door dimension data (this part is simulated by the puzzle system)
  const doorData = doors.map(d => ({
    door: d,
    height: d + 1,
    width: d + 2,
  }));

  console.log("Checking doors:", doorData.map(d => \`#\${d.door}area=\${d.height * d.width}\`));

  // --- BUGGY IMPLEMENTATION ---
  // The map builder tried to implement the code to find the exit door with an area is 3x the average of the others,
  // but the target door was accidentally included in the average calculation,
  // this means the game always returns the wrong answer reportedDoor (wrong).
  function findExitDoor() {
    let found = reportedDoor;
    for (const d of doorData) {
      const others = doorData; // BUG: should filter out the current door!
      const avgArea = others.reduce((sum, o) => sum + o.height * o.width, 0) / others.length;
      const thisArea = d.height * d.width;
      if (Math.abs(thisArea - 3 * avgArea) < 0.01) {
        found = d.door;
      }
    }
    return found;
  }

  const guessedDoor = findExitDoor();
  console.log("System guessed door:", guessedDoor);

  // The buggy system returns its own guess
  return guessedDoor;
}
`;

export default function DoorPuzzle({
                                       stage: stageProp,
                                       doorsCount = 5,
                                       timeLimitMs = 5000,
                                       onComplete,
                                   }: Props) {
    const params = useParams() as { stage?: Stage };
    const stage = (params?.stage ?? stageProp ?? "door") as Stage;

    // --------- Timer ---------
    const [elapsedMs, setElapsedMs] = useState(0);
    const [timerRunning, setTimerRunning] = useState(false);
    const hardTimeoutRef = useRef<number | null>(null);
    const tickRef = useRef<number | null>(null);

    const startTimer = () => {
        if (timerRunning) return;
        setTimerRunning(true);
        const startAt = performance.now() - elapsedMs;
        tickRef.current = window.setInterval(() => {
            setElapsedMs(performance.now() - startAt);
        }, 50) as unknown as number;
    };
    const pauseTimer = () => {
        if (!timerRunning) return;
        setTimerRunning(false);
        if (tickRef.current != null) {
            window.clearInterval(tickRef.current);
            tickRef.current = null;
        }
    };
    const resetTimer = () => {
        pauseTimer();
        setElapsedMs(0);
    };
    useEffect(() => {
        return () => {
            if (tickRef.current != null) window.clearInterval(tickRef.current);
            if (hardTimeoutRef.current != null) window.clearTimeout(hardTimeoutRef.current);
        };
    }, []);

    // --------- Inputs (get a new random value very load ---------
    const doors = useMemo(() => Array.from({ length: doorsCount }, (_, i) => i + 1), [doorsCount]);

    // Random variable door assignment
    const reportedDoorRef = useRef<number>(1 + Math.floor(Math.random() * doorsCount));
    // …then pick a correctDoor that is guaranteed to be different
    // Compute a guaranteed-different correct door
    const r = reportedDoorRef.current;
    const shift = 1 + Math.floor(Math.random() * (doorsCount - 1));
    const correctDoorValue = ((r - 1 + shift) % doorsCount) + 1;
    const correctDoorRef = useRef<number>(correctDoorValue);
    if (typeof correctDoorRef.current === "function") {
        // first render: materialize the value
        // @ts-ignore
        correctDoorRef.current = correctDoorRef.current();
    }

    // --------- Editor & Output ---------
    const [code, setCode] = useState(DEFAULT_TEMPLATE);
    const [status, setStatus] = useState<RunStatus>("idle");
    const [output, setOutput] = useState<string>("(terminal ready)\n");

    // --------- Worker Sandbox ---------
    const workerUrl = useMemo(() => {
        const workerSource = `
      self.onmessage = (evt) => {
        const { code, doors, reportedDoor, correctDoor } = evt.data || {};
        const send = (m) => self.postMessage(m);
        const console = { log: (...args) => send({ type: "log", data: args.map(String).join(" ") }) };

        try {
          const wrapped = new Function(
            "doors",
            "reportedDoor",
            "correctDoor",
            "console",
            code + "\\n; return (typeof pickDoor === 'function') ? pickDoor(doors, reportedDoor) : (function(){ throw new Error('No pickDoor(doors, reportedDoor) function found'); })();"
          );
          const result = wrapped(doors, reportedDoor, correctDoor, console);
          send({ type: "done", result });
        } catch (err) {
          send({ type: "error", error: String(err && err.message ? err.message : err) });
        }
      };
    `;
        const blob = new Blob([workerSource], { type: "application/javascript" });
        return URL.createObjectURL(blob);
    }, []);

    const runCode = () => {
        setOutput("(running...)\n");
        setStatus("running");

        if (!timerRunning) startTimer();

        const worker = new Worker(workerUrl);
        const cleanup = (finalStatus: RunStatus) => {
            if (hardTimeoutRef.current != null) {
                window.clearTimeout(hardTimeoutRef.current);
                hardTimeoutRef.current = null;
            }
            worker.terminate();
            setStatus(finalStatus);
            if (finalStatus === "success") pauseTimer();
        };

        worker.onmessage = (e) => {
            const msg = e.data || {};
            if (msg.type === "log") {
                setOutput((prev) => prev + msg.data + "\n");
            } else if (msg.type === "done") {
                const val = Number(msg.result);
                const correct = Number(correctDoorRef.current);

                if (Number.isNaN(val)) {
                    setOutput((prev) => prev + `❌ Your function did not return a number.\n`);
                    cleanup("error");
                    return;
                }

                if (val === correct) {
                    setOutput((prev) => prev + `✅ Correct: Door ${correct} is the real exit. Nice debugging!\n`);
                    localStorage.setItem("escapeRoomSolvedStage", "door");
                    onComplete?.();
                    cleanup("success");
                } else {
                    setOutput((prev) => prev + `❌ Returned Door ${val}. Expected Door ${correct}.\n`);
                    cleanup("error");
                }
            } else if (msg.type === "error") {
                setOutput((prev) => prev + `💥 Error: ${msg.error}\n`);
                cleanup("error");
            }
        };

        hardTimeoutRef.current = window.setTimeout(() => {
            setOutput((prev) => prev + "⏱️ Timed out.\n");
            cleanup("timeout");
        }, timeLimitMs) as unknown as number;

        worker.postMessage({
            code,
            doors,
            reportedDoor: reportedDoorRef.current,
            correctDoor: correctDoorRef.current,
        });
    };

    // --------- UI helpers ---------
    const hhmmss = (ms: number) => {
        const s = Math.floor(ms / 1000);
        const h = Math.floor(s / 3600);
        const m = Math.floor((s % 3600) / 60);
        const sec = s % 60;
        return `${h > 0 ? h + ":" : ""}${String(m).padStart(2, "0")}:${String(sec).padStart(2, "0")}.${String(ms % 1000).padStart(3, "0")}`;
    };

    // **************************************
    // ************ PRESENTATION ************
    // **************************************
    return (
        <div className="min-h-screen bg-zinc-950 text-zinc-100">
            <div className="max-w-6xl mx-auto px-4 py-6">
                <header className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-4">
                    <div>
                        <h1 className="text-xl sm:text-2xl font-semibold">Coding Races - {stage.toUpperCase()} Stage</h1>
                        <p className="text-xs opacity-70">
                            Fix the buggy code. The system reports the exit door incorrectly—return the real exit.
                        </p>
                    </div>

                    {/* Manual Timer */}
                    <div className="flex items-center gap-2">
            <span className="text-sm tabular-nums bg-zinc-900/70 border border-zinc-800 rounded px-2 py-1">
              {hhmmss(elapsedMs)}
            </span>
                        {!timerRunning ? (
                            <button className="px-3 py-1 rounded bg-emerald-700 hover:bg-emerald-600" onClick={startTimer}>
                                Start Timer
                            </button>
                        ) : (
                            <button className="px-3 py-1 rounded bg-amber-600 hover:bg-amber-500" onClick={pauseTimer}>
                                Pause Timer
                            </button>
                        )}
                        <button className="px-3 py-1 rounded bg-zinc-800 border border-zinc-700 hover:bg-zinc-700" onClick={resetTimer}>
                            Reset Timer
                        </button>
                    </div>
                </header>

                <div className="grid md:grid-cols-2 gap-4">
                    {/* Editor */}
                    <div className="p-3 rounded-xl border border-zinc-800 bg-zinc-900/60">
                        <div className="flex items-center justify-between mb-2">
                            <h2 className="text-sm font-medium">Editor</h2>
                            <div className="text-xs space-x-2">
                                <span className="opacity-70">Doors:</span>
                                <span className="px-2 py-0.5 rounded bg-zinc-800 border border-zinc-700">
                  [{Array.from(doors).join(", ")}]
                </span>
                                <span className="opacity-70 ml-2">Reported:</span>
                                <span className="px-2 py-0.5 rounded bg-zinc-800 border border-zinc-700">
                  {reportedDoorRef.current}
                </span>
                            </div>
                        </div>
                        <textarea
                            value={code}
                            onChange={(e) => setCode(e.target.value)}
                            spellCheck={false}
                            className="w-full h-64 md:h-[28rem] font-mono text-sm leading-5 bg-zinc-950 text-zinc-100 rounded-lg border border-zinc-800 p-3 outline-none focus:ring-2 focus:ring-amber-400"
                        />
                        <div className="mt-3 flex items-center gap-2">
                            <button onClick={runCode} className="px-3 py-1 rounded bg-amber-600 hover:bg-amber-500">
                                Run
                            </button>
                            <button
                                onClick={() => setCode(DEFAULT_TEMPLATE)}
                                className="px-3 py-1 rounded bg-zinc-800 border-zinc-700 hover:bg-zinc-700"
                            >
                                Reset Template
                            </button>
                            <span className="text-xs opacity-60">Time limit: {timeLimitMs} ms</span>
                        </div>
                    </div>

                    {/* Terminal */}
                    <div className="p-3 rounded-xl border border-zinc-800 bg-zinc-900/60">
                        <div className="flex items-center justify-between mb-2">
                            <h2 className="text-sm font-medium">Terminal</h2>
                            <span
                                className={`text-xs px-2 py-0.5 rounded border ${
                                    status === "running"
                                        ? "border-amber-500 text-amber-300"
                                        : status === "success"
                                            ? "border-emerald-600 text-emerald-300"
                                            : status === "error"
                                                ? "border-rose-600 text-rose-300"
                                                : status === "timeout"
                                                    ? "border-yellow-700 text-yellow-300"
                                                    : "border-zinc-700 text-zinc-400"
                                }`}
                            >
                {status.toUpperCase()}
              </span>
                        </div>
                        <pre className="h-64 md:h-[28rem] overflow-auto rounded-lg bg-black/80 text-green-300 p-3 text-xs leading-5">
              {output}
            </pre>
                        {status === "success" && (
                            <div className="mt-2 text-xs text-emerald-300">
                                Exit accepted. Progress saved. Return to the escape room!
                            </div>
                        )}
                    </div>
                </div>

                {/* Hints */}
                <div className="mt-4 p-3 rounded-xl border border-zinc-800 bg-zinc-900/60 text-xs leading-5">
                    <details>
                        <summary className="cursor-pointer font-medium">Hints</summary>
                        <ul className="list-disc ml-6 space-y-1">
                            <li><code>reportedDoor</code> is wrong on purpose—don’t return it.</li>
                            <li>The real door is available as <code>correctDoor</code> for this debugging exercise.</li>
                            <li>Return a number from the set in <code>doors</code> (e.g. 1..5).</li>
                            <li>Use <code>console.log()</code> to show messages in the terminal.</li>
                        </ul>
                    </details>
                </div>
            </div>
        </div>
    );
}